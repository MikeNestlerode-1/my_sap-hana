# This Azure pipeline YAML contains tests to validate and verify the pull requests made for automated deployment of SAP landscape.
# This pipeline will only run all the tests if the PR is made from a branch of Azure/sap-hana repo.
# Branches from forked repositories will fail in the Azure provider authentication phase due to security reason
# A pipeline with no CI trigger
trigger: none
# Only trigger build when a PR is opened for code under deploy/v2
pr:
  branches:
    include:
    - master
  paths:
    include:
    - deploy/v2/*
    exclude:
    - README.md
    - monitor/*
    - deploy/*
variables:
  - group: azure-config-variables
  - group: azure-sap-hana-pipeline-secrets
stages:
- stage: SetEnv
  jobs:
  - job: installAnsible
    pool:
      vmImage: "ubuntu-16.04"
    steps:
    - checkout: self
      clean: "all"
      path: "sap-hana"
      persistCredentials: true
    - script: |
        pip install packaging
        pip install --ignore-installed pyyaml ansible[azure]
        sudo -H pip install msrest==0.6.0
      displayName: 'Install python tools'
#####################################################################
# This stage create resources for below test cases:                 # 
# - createAllNew: it creates all resources from scratch             # 
# - reuseRG: it only reuses an existing resource group              #
# - reuseVnet: it only reuses an existing vnet from createAllNew    #
# - reuseNSG: it only reuses an existing NSG from createAllNew      #
#####################################################################
- stage: testLoop
- template: templates/stage-template.yaml
  parameters:
    param: ["a","b"]
- stage: CreatingResources
  dependsOn: SetEnv
  jobs:
  - job: createAllNew
    variables:
      scenario: v2-allNew
      testcase: $(scenario)-$(Build.BuildId)
    steps:
    - template: templates/update-place-holder.yaml
      parameters:
        scenario: $(scenario)
        testCaseName: $(testcase)
        placeHolder: var-rg-name
        value: $(testcase)
    - template: templates/terraform-deployment-steps.yaml
      parameters:
        testCaseName: $(testcase)
    - template: templates/ansible-deployment-steps.yaml
      parameters:
        testCaseName: $(testcase)
  - job: reuseRG
    variables:
      scenario: v2-reuseRG
      testcase: $(scenario)-$(Build.BuildId)
    steps:
    - script: |
        az login --service-principal --user $(hana-pipeline-spn-id) --password  $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none
        az group create --location eastus -n $(testcase)
        echo '##vso[task.setvariable variable=arm_id]$(az group show --name $(testcase) --query id --output tsv)'
    - template: templates/update-place-holder.yaml
      parameters:
        scenario: $(scenario)
        testCaseName: $(testcase)
        placeHolder: var-rg-name
        value: $(testcase)
    - template: templates/update-place-holder.yaml
      parameters:
        scenario: $(scenario)
        testCaseName: $(testcase)
        placeHolder: rg-arm-id
        value: $(arm_id)
    - template: templates/terraform-deployment-steps.yaml
      parameters:
        testCaseName: $(testcase)
    - template: templates/ansible-deployment-steps.yaml
      parameters:
        testCaseName: $(testcase)
  - job: reuseVnet
    dependsOn: createAllNew
    variables:
      scenario: v2-reuseVNET
      testcase: $(scenario)-$(Build.BuildId)
    steps:
    - script: |
        az login --service-principal --user $(hana-pipeline-spn-id) --password  $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none
        echo '##vso[task.setvariable variable=arm_id]$(az network vnet show --resource-group v2-allNew-$(Build.BuildId) --name vnet-mgmt --query id --output tsv)'
    - template: templates/update-place-holder.yaml
      parameters:
        scenario: $(scenario)
        testCaseName: $(testcase)
        placeHolder: var-rg-name
        value: $(testcase)
    - template: templates/update-place-holder.yaml
      parameters:
        scenario: $(scenario)
        testCaseName: $(testcase)
        placeHolder: vnet-arm-id
        value: $(arm_id)
    - template: templates/terraform-deployment-steps.yaml
      parameters:
        testCaseName: $(testcase)
    - template: templates/ansible-deployment-steps.yaml
      parameters:
        testCaseName: $(testcase)
  - job: reuseNSG
    dependsOn: createAllNew
    variables:
      scenario: v2-reuseNSG
      testcase: $(scenario)-$(Build.BuildId)
    steps:
    - script: |
        az login --service-principal --user $(hana-pipeline-spn-id) --password  $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none
        echo '##vso[task.setvariable variable=arm_id]$(az network nsg show --resource-group v2-allNew-$(Build.BuildId) --name nsg-mgmt --query id --output tsv)' 
    - template: templates/update-place-holder.yaml
      parameters:
        scenario: $(scenario)
        testCaseName: $(testcase)
        placeHolder: var-rg-name
        value: $(testcase)
    - template: templates/update-place-holder.yaml
      parameters:
        scenario: $(scenario)
        testCaseName: $(testcase)
        placeHolder: nsg-arm-id
        value: $(arm_id)
    - template: templates/terraform-deployment-steps.yaml
      parameters:
        testCaseName: $(testcase)
    - template: templates/ansible-deployment-steps.yaml
      parameters:
        testCaseName: $(testcase)
#####################################################################
# This stage destroy resources created from all above test cases.   #
# It will be triggered after stage CreatingResources is finished.   #
# It will always be triggered, regardless the status of stage one - #
# success of fail                                                   #
# Tag "Delete=True" will be added to mark all resource groups for   #
# scheduled deletion done by azure-pipelines-cleanup.yaml           #
#####################################################################
- stage: DestroyingResources
  dependsOn: CreatingResources
  condition: or(succeededOrFailed(), always())
  jobs:
  - job: cleanUp
    steps:
      - script: |
          az login --service-principal --user $(hana-pipeline-spn-id) --password  $(hana-pipeline-spn-pw) --tenant $(landscape-tenant) --output none
          rg_list=(
            v2-allNew-$(Build.BuildId) 
            v2-reuseRG-$(Build.BuildId) 
            v2-reuseVNET-$(Build.BuildId) 
            v2-reuseNSG-$(Build.BuildId)
          )
          for rg in "${rg_list[@]}"
          do
            if $(az group exists -n $rg); then
              az group update --resource-group $rg --set tags.Delete=True
              az group delete -n $rg --no-wait -y
              echo $rg
            fi
          done
        displayName: 'Clean up'
        env:
          TF_VAR_azure_service_principal_id: $(hana-pipeline-spn-id)
          TF_VAR_azure_service_principal_pw: $(hana-pipeline-spn-pw)
          AZURE_CLIENT_ID: $(hana-pipeline-spn-id)
          AZURE_SECRET: $(hana-pipeline-spn-pw)
          AZURE_TENANT: $(landscape-tenant)
          AZURE_SUBSCRIPTION_ID: $(landscape-subscription)
          ARM_CLIENT_ID: $(hana-pipeline-spn-id)
          ARM_CLIENT_SECRET: $(hana-pipeline-spn-pw)
          ARM_TENANT_ID: $(landscape-tenant)
          ARM_SUBSCRIPTION_ID: $(landscape-subscription)
